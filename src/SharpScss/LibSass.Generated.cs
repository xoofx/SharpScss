//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;

namespace SharpScss
{
    using System.Runtime.InteropServices;
    
    internal static partial class LibSass
    {
        /// <summary>
        /// Different render styles
        /// </summary>
        public enum Sass_Output_Style : int
        {
            SASS_STYLE_NESTED,
            
            SASS_STYLE_EXPANDED,
            
            SASS_STYLE_COMPACT,
            
            SASS_STYLE_COMPRESSED,
            
            /// <summary>
            /// only used internaly
            /// </summary>
            SASS_STYLE_INSPECT,
            
            /// <summary>
            /// only used internaly
            /// </summary>
            SASS_STYLE_TO_SASS,
            
            /// <summary>
            /// only used internaly
            /// </summary>
            SASS_STYLE_TO_CSS,
        }
        
        public const LibSass.Sass_Output_Style SASS_STYLE_NESTED = Sass_Output_Style.SASS_STYLE_NESTED;
        
        public const LibSass.Sass_Output_Style SASS_STYLE_EXPANDED = Sass_Output_Style.SASS_STYLE_EXPANDED;
        
        public const LibSass.Sass_Output_Style SASS_STYLE_COMPACT = Sass_Output_Style.SASS_STYLE_COMPACT;
        
        public const LibSass.Sass_Output_Style SASS_STYLE_COMPRESSED = Sass_Output_Style.SASS_STYLE_COMPRESSED;
        
        /// <summary>
        /// only used internaly
        /// </summary>
        public const LibSass.Sass_Output_Style SASS_STYLE_INSPECT = Sass_Output_Style.SASS_STYLE_INSPECT;
        
        /// <summary>
        /// only used internaly
        /// </summary>
        public const LibSass.Sass_Output_Style SASS_STYLE_TO_SASS = Sass_Output_Style.SASS_STYLE_TO_SASS;
        
        /// <summary>
        /// only used internaly
        /// </summary>
        public const LibSass.Sass_Output_Style SASS_STYLE_TO_CSS = Sass_Output_Style.SASS_STYLE_TO_CSS;
        
        /// <summary>
        /// Type for Sass values
        /// </summary>
        public enum Sass_Tag : int
        {
            SASS_BOOLEAN,
            
            SASS_NUMBER,
            
            SASS_COLOR,
            
            SASS_STRING,
            
            SASS_LIST,
            
            SASS_MAP,
            
            SASS_NULL,
            
            SASS_ERROR,
            
            SASS_WARNING,
        }
        
        public const LibSass.Sass_Tag SASS_BOOLEAN = Sass_Tag.SASS_BOOLEAN;
        
        public const LibSass.Sass_Tag SASS_NUMBER = Sass_Tag.SASS_NUMBER;
        
        public const LibSass.Sass_Tag SASS_COLOR = Sass_Tag.SASS_COLOR;
        
        public const LibSass.Sass_Tag SASS_STRING = Sass_Tag.SASS_STRING;
        
        public const LibSass.Sass_Tag SASS_LIST = Sass_Tag.SASS_LIST;
        
        public const LibSass.Sass_Tag SASS_MAP = Sass_Tag.SASS_MAP;
        
        public const LibSass.Sass_Tag SASS_NULL = Sass_Tag.SASS_NULL;
        
        public const LibSass.Sass_Tag SASS_ERROR = Sass_Tag.SASS_ERROR;
        
        public const LibSass.Sass_Tag SASS_WARNING = Sass_Tag.SASS_WARNING;
        
        /// <summary>
        /// Tags for denoting Sass list separators
        /// </summary>
        public enum Sass_Separator : int
        {
            SASS_COMMA,
            
            SASS_SPACE,
            
            /// <summary>
            /// only used internally to represent a hash map before evaluation
            /// otherwise we would be too early to check for duplicate keys
            /// </summary>
            SASS_HASH,
        }
        
        public const LibSass.Sass_Separator SASS_COMMA = Sass_Separator.SASS_COMMA;
        
        public const LibSass.Sass_Separator SASS_SPACE = Sass_Separator.SASS_SPACE;
        
        /// <summary>
        /// only used internally to represent a hash map before evaluation
        /// otherwise we would be too early to check for duplicate keys
        /// </summary>
        public const LibSass.Sass_Separator SASS_HASH = Sass_Separator.SASS_HASH;
        
        /// <summary>
        /// Value Operators
        /// </summary>
        public enum Sass_OP : int
        {
            /// <summary>
            /// logical connectives
            /// </summary>
            AND,
            
            /// <summary>
            /// logical connectives
            /// </summary>
            OR,
            
            /// <summary>
            /// arithmetic relations
            /// </summary>
            EQ,
            
            /// <summary>
            /// arithmetic relations
            /// </summary>
            NEQ,
            
            /// <summary>
            /// arithmetic relations
            /// </summary>
            GT,
            
            /// <summary>
            /// arithmetic relations
            /// </summary>
            GTE,
            
            /// <summary>
            /// arithmetic relations
            /// </summary>
            LT,
            
            /// <summary>
            /// arithmetic relations
            /// </summary>
            LTE,
            
            /// <summary>
            /// arithmetic functions
            /// </summary>
            ADD,
            
            /// <summary>
            /// arithmetic functions
            /// </summary>
            SUB,
            
            /// <summary>
            /// arithmetic functions
            /// </summary>
            MUL,
            
            /// <summary>
            /// arithmetic functions
            /// </summary>
            DIV,
            
            /// <summary>
            /// arithmetic functions
            /// </summary>
            MOD,
            
            /// <summary>
            /// so we know how big to make the op table
            /// </summary>
            NUM_OPS,
        }
        
        /// <summary>
        /// logical connectives
        /// </summary>
        public const LibSass.Sass_OP AND = Sass_OP.AND;
        
        /// <summary>
        /// logical connectives
        /// </summary>
        public const LibSass.Sass_OP OR = Sass_OP.OR;
        
        /// <summary>
        /// arithmetic relations
        /// </summary>
        public const LibSass.Sass_OP EQ = Sass_OP.EQ;
        
        /// <summary>
        /// arithmetic relations
        /// </summary>
        public const LibSass.Sass_OP NEQ = Sass_OP.NEQ;
        
        /// <summary>
        /// arithmetic relations
        /// </summary>
        public const LibSass.Sass_OP GT = Sass_OP.GT;
        
        /// <summary>
        /// arithmetic relations
        /// </summary>
        public const LibSass.Sass_OP GTE = Sass_OP.GTE;
        
        /// <summary>
        /// arithmetic relations
        /// </summary>
        public const LibSass.Sass_OP LT = Sass_OP.LT;
        
        /// <summary>
        /// arithmetic relations
        /// </summary>
        public const LibSass.Sass_OP LTE = Sass_OP.LTE;
        
        /// <summary>
        /// arithmetic functions
        /// </summary>
        public const LibSass.Sass_OP ADD = Sass_OP.ADD;
        
        /// <summary>
        /// arithmetic functions
        /// </summary>
        public const LibSass.Sass_OP SUB = Sass_OP.SUB;
        
        /// <summary>
        /// arithmetic functions
        /// </summary>
        public const LibSass.Sass_OP MUL = Sass_OP.MUL;
        
        /// <summary>
        /// arithmetic functions
        /// </summary>
        public const LibSass.Sass_OP DIV = Sass_OP.DIV;
        
        /// <summary>
        /// arithmetic functions
        /// </summary>
        public const LibSass.Sass_OP MOD = Sass_OP.MOD;
        
        /// <summary>
        /// so we know how big to make the op table
        /// </summary>
        public const LibSass.Sass_OP NUM_OPS = Sass_OP.NUM_OPS;
        
        /// <summary>
        /// Type of function calls
        /// </summary>
        public enum Sass_Callee_Type : int
        {
            SASS_CALLEE_MIXIN,
            
            SASS_CALLEE_FUNCTION,
            
            SASS_CALLEE_C_FUNCTION,
        }
        
        public const LibSass.Sass_Callee_Type SASS_CALLEE_MIXIN = Sass_Callee_Type.SASS_CALLEE_MIXIN;
        
        public const LibSass.Sass_Callee_Type SASS_CALLEE_FUNCTION = Sass_Callee_Type.SASS_CALLEE_FUNCTION;
        
        public const LibSass.Sass_Callee_Type SASS_CALLEE_C_FUNCTION = Sass_Callee_Type.SASS_CALLEE_C_FUNCTION;
        
        /// <summary>
        /// Compiler states
        /// </summary>
        public enum Sass_Compiler_State : int
        {
            SASS_COMPILER_CREATED,
            
            SASS_COMPILER_PARSED,
            
            SASS_COMPILER_EXECUTED,
        }
        
        public const LibSass.Sass_Compiler_State SASS_COMPILER_CREATED = Sass_Compiler_State.SASS_COMPILER_CREATED;
        
        public const LibSass.Sass_Compiler_State SASS_COMPILER_PARSED = Sass_Compiler_State.SASS_COMPILER_PARSED;
        
        public const LibSass.Sass_Compiler_State SASS_COMPILER_EXECUTED = Sass_Compiler_State.SASS_COMPILER_EXECUTED;
        
        /// <summary>
        /// Forward declaration
        /// </summary>
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public readonly partial struct Sass_Value : IEquatable<Sass_Value>
        {
            private readonly IntPtr _handle;
            
            public Sass_Value(IntPtr handle) => _handle = handle;
            
            public IntPtr Handle => _handle;
            
            public bool Equals(Sass_Value other) => _handle.Equals(other._handle);
            
            public override bool Equals(object obj) => obj is Sass_Value other && Equals(other);
            
            public override int GetHashCode() => _handle.GetHashCode();
            
            public override string ToString() => "0x" + (IntPtr.Size == 8 ? _handle.ToString("X16") : _handle.ToString("X8"));
            
            public static bool operator ==(Sass_Value left, Sass_Value right) => left.Equals(right);
            
            public static bool operator !=(Sass_Value left, Sass_Value right) => !left.Equals(right);
        }
        
        /// <summary>
        /// Forward declaration
        /// </summary>
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public readonly partial struct Sass_Env : IEquatable<Sass_Env>
        {
            private readonly IntPtr _handle;
            
            public Sass_Env(IntPtr handle) => _handle = handle;
            
            public IntPtr Handle => _handle;
            
            public bool Equals(Sass_Env other) => _handle.Equals(other._handle);
            
            public override bool Equals(object obj) => obj is Sass_Env other && Equals(other);
            
            public override int GetHashCode() => _handle.GetHashCode();
            
            public override string ToString() => "0x" + (IntPtr.Size == 8 ? _handle.ToString("X16") : _handle.ToString("X8"));
            
            public static bool operator ==(Sass_Env left, Sass_Env right) => left.Equals(right);
            
            public static bool operator !=(Sass_Env left, Sass_Env right) => !left.Equals(right);
        }
        
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public readonly partial struct Sass_Callee : IEquatable<Sass_Callee>
        {
            private readonly IntPtr _handle;
            
            public Sass_Callee(IntPtr handle) => _handle = handle;
            
            public IntPtr Handle => _handle;
            
            public bool Equals(Sass_Callee other) => _handle.Equals(other._handle);
            
            public override bool Equals(object obj) => obj is Sass_Callee other && Equals(other);
            
            public override int GetHashCode() => _handle.GetHashCode();
            
            public override string ToString() => "0x" + (IntPtr.Size == 8 ? _handle.ToString("X16") : _handle.ToString("X8"));
            
            public static bool operator ==(Sass_Callee left, Sass_Callee right) => left.Equals(right);
            
            public static bool operator !=(Sass_Callee left, Sass_Callee right) => !left.Equals(right);
        }
        
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public readonly partial struct Sass_Import : IEquatable<Sass_Import>
        {
            private readonly IntPtr _handle;
            
            public Sass_Import(IntPtr handle) => _handle = handle;
            
            public IntPtr Handle => _handle;
            
            public bool Equals(Sass_Import other) => _handle.Equals(other._handle);
            
            public override bool Equals(object obj) => obj is Sass_Import other && Equals(other);
            
            public override int GetHashCode() => _handle.GetHashCode();
            
            public override string ToString() => "0x" + (IntPtr.Size == 8 ? _handle.ToString("X16") : _handle.ToString("X8"));
            
            public static bool operator ==(Sass_Import left, Sass_Import right) => left.Equals(right);
            
            public static bool operator !=(Sass_Import left, Sass_Import right) => !left.Equals(right);
        }
        
        /// <summary>
        /// Forward declaration
        /// </summary>
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public readonly partial struct Sass_Options : IEquatable<Sass_Options>
        {
            private readonly IntPtr _handle;
            
            public Sass_Options(IntPtr handle) => _handle = handle;
            
            public IntPtr Handle => _handle;
            
            public bool Equals(Sass_Options other) => _handle.Equals(other._handle);
            
            public override bool Equals(object obj) => obj is Sass_Options other && Equals(other);
            
            public override int GetHashCode() => _handle.GetHashCode();
            
            public override string ToString() => "0x" + (IntPtr.Size == 8 ? _handle.ToString("X16") : _handle.ToString("X8"));
            
            public static bool operator ==(Sass_Options left, Sass_Options right) => left.Equals(right);
            
            public static bool operator !=(Sass_Options left, Sass_Options right) => !left.Equals(right);
        }
        
        /// <summary>
        /// Forward declaration
        /// </summary>
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public readonly partial struct Sass_Compiler : IEquatable<Sass_Compiler>
        {
            private readonly IntPtr _handle;
            
            public Sass_Compiler(IntPtr handle) => _handle = handle;
            
            public IntPtr Handle => _handle;
            
            public bool Equals(Sass_Compiler other) => _handle.Equals(other._handle);
            
            public override bool Equals(object obj) => obj is Sass_Compiler other && Equals(other);
            
            public override int GetHashCode() => _handle.GetHashCode();
            
            public override string ToString() => "0x" + (IntPtr.Size == 8 ? _handle.ToString("X16") : _handle.ToString("X8"));
            
            public static bool operator ==(Sass_Compiler left, Sass_Compiler right) => left.Equals(right);
            
            public static bool operator !=(Sass_Compiler left, Sass_Compiler right) => !left.Equals(right);
        }
        
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public readonly partial struct Sass_Importer : IEquatable<Sass_Importer>
        {
            private readonly IntPtr _handle;
            
            public Sass_Importer(IntPtr handle) => _handle = handle;
            
            public IntPtr Handle => _handle;
            
            public bool Equals(Sass_Importer other) => _handle.Equals(other._handle);
            
            public override bool Equals(object obj) => obj is Sass_Importer other && Equals(other);
            
            public override int GetHashCode() => _handle.GetHashCode();
            
            public override string ToString() => "0x" + (IntPtr.Size == 8 ? _handle.ToString("X16") : _handle.ToString("X8"));
            
            public static bool operator ==(Sass_Importer left, Sass_Importer right) => left.Equals(right);
            
            public static bool operator !=(Sass_Importer left, Sass_Importer right) => !left.Equals(right);
        }
        
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public readonly partial struct Sass_Function : IEquatable<Sass_Function>
        {
            private readonly IntPtr _handle;
            
            public Sass_Function(IntPtr handle) => _handle = handle;
            
            public IntPtr Handle => _handle;
            
            public bool Equals(Sass_Function other) => _handle.Equals(other._handle);
            
            public override bool Equals(object obj) => obj is Sass_Function other && Equals(other);
            
            public override int GetHashCode() => _handle.GetHashCode();
            
            public override string ToString() => "0x" + (IntPtr.Size == 8 ? _handle.ToString("X16") : _handle.ToString("X8"));
            
            public static bool operator ==(Sass_Function left, Sass_Function right) => left.Equals(right);
            
            public static bool operator !=(Sass_Function left, Sass_Function right) => !left.Equals(right);
        }
        
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public readonly partial struct Sass_Context : IEquatable<Sass_Context>
        {
            private readonly IntPtr _handle;
            
            public Sass_Context(IntPtr handle) => _handle = handle;
            
            public IntPtr Handle => _handle;
            
            public bool Equals(Sass_Context other) => _handle.Equals(other._handle);
            
            public override bool Equals(object obj) => obj is Sass_Context other && Equals(other);
            
            public override int GetHashCode() => _handle.GetHashCode();
            
            public override string ToString() => "0x" + (IntPtr.Size == 8 ? _handle.ToString("X16") : _handle.ToString("X8"));
            
            public static bool operator ==(Sass_Context left, Sass_Context right) => left.Equals(right);
            
            public static bool operator !=(Sass_Context left, Sass_Context right) => !left.Equals(right);
        }
        
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public readonly partial struct Sass_File_Context : IEquatable<Sass_File_Context>
        {
            private readonly IntPtr _handle;
            
            public Sass_File_Context(IntPtr handle) => _handle = handle;
            
            public IntPtr Handle => _handle;
            
            public bool Equals(Sass_File_Context other) => _handle.Equals(other._handle);
            
            public override bool Equals(object obj) => obj is Sass_File_Context other && Equals(other);
            
            public override int GetHashCode() => _handle.GetHashCode();
            
            public override string ToString() => "0x" + (IntPtr.Size == 8 ? _handle.ToString("X16") : _handle.ToString("X8"));
            
            public static bool operator ==(Sass_File_Context left, Sass_File_Context right) => left.Equals(right);
            
            public static bool operator !=(Sass_File_Context left, Sass_File_Context right) => !left.Equals(right);
        }
        
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public readonly partial struct Sass_Data_Context : IEquatable<Sass_Data_Context>
        {
            private readonly IntPtr _handle;
            
            public Sass_Data_Context(IntPtr handle) => _handle = handle;
            
            public IntPtr Handle => _handle;
            
            public bool Equals(Sass_Data_Context other) => _handle.Equals(other._handle);
            
            public override bool Equals(object obj) => obj is Sass_Data_Context other && Equals(other);
            
            public override int GetHashCode() => _handle.GetHashCode();
            
            public override string ToString() => "0x" + (IntPtr.Size == 8 ? _handle.ToString("X16") : _handle.ToString("X8"));
            
            public static bool operator ==(Sass_Data_Context left, Sass_Data_Context right) => left.Equals(right);
            
            public static bool operator !=(Sass_Data_Context left, Sass_Data_Context right) => !left.Equals(right);
        }
        
        /// <summary>
        /// Typedef helpers for callee lists
        /// </summary>
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public readonly partial struct Sass_Env_Frame : IEquatable<Sass_Env_Frame>
        {
            public Sass_Env_Frame(LibSass.Sass_Env value) => this.Value = value;
            
            public readonly LibSass.Sass_Env Value;
            
            public bool Equals(Sass_Env_Frame other) =>  Value.Equals(other.Value);
            
            public override bool Equals(object obj) => obj is Sass_Env_Frame other && Equals(other);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator LibSass.Sass_Env(Sass_Env_Frame from) => from.Value;
            
            public static implicit operator Sass_Env_Frame(LibSass.Sass_Env from) => new Sass_Env_Frame(from);
            
            public static bool operator ==(Sass_Env_Frame left, Sass_Env_Frame right) => left.Equals(right);
            
            public static bool operator !=(Sass_Env_Frame left, Sass_Env_Frame right) => !left.Equals(right);
        }
        
        /// <summary>
        /// Typedef helpers for callee lists
        /// </summary>
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public readonly partial struct Sass_Callee_Entry : IEquatable<Sass_Callee_Entry>
        {
            public Sass_Callee_Entry(LibSass.Sass_Callee value) => this.Value = value;
            
            public readonly LibSass.Sass_Callee Value;
            
            public bool Equals(Sass_Callee_Entry other) =>  Value.Equals(other.Value);
            
            public override bool Equals(object obj) => obj is Sass_Callee_Entry other && Equals(other);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator LibSass.Sass_Callee(Sass_Callee_Entry from) => from.Value;
            
            public static implicit operator Sass_Callee_Entry(LibSass.Sass_Callee from) => new Sass_Callee_Entry(from);
            
            public static bool operator ==(Sass_Callee_Entry left, Sass_Callee_Entry right) => left.Equals(right);
            
            public static bool operator !=(Sass_Callee_Entry left, Sass_Callee_Entry right) => !left.Equals(right);
        }
        
        /// <summary>
        /// Typedef helpers for import lists
        /// </summary>
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public readonly partial struct Sass_Import_Entry : IEquatable<Sass_Import_Entry>
        {
            public Sass_Import_Entry(LibSass.Sass_Import value) => this.Value = value;
            
            public readonly LibSass.Sass_Import Value;
            
            public bool Equals(Sass_Import_Entry other) =>  Value.Equals(other.Value);
            
            public override bool Equals(object obj) => obj is Sass_Import_Entry other && Equals(other);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator LibSass.Sass_Import(Sass_Import_Entry from) => from.Value;
            
            public static implicit operator Sass_Import_Entry(LibSass.Sass_Import from) => new Sass_Import_Entry(from);
            
            public static bool operator ==(Sass_Import_Entry left, Sass_Import_Entry right) => left.Equals(right);
            
            public static bool operator !=(Sass_Import_Entry left, Sass_Import_Entry right) => !left.Equals(right);
        }
        
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public readonly partial struct Sass_Import_List : IEquatable<Sass_Import_List>
        {
            public Sass_Import_List(IntPtr value) => this.Value = value;
            
            public readonly IntPtr Value;
            
            public bool Equals(Sass_Import_List other) =>  Value.Equals(other.Value);
            
            public override bool Equals(object obj) => obj is Sass_Import_List other && Equals(other);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator IntPtr(Sass_Import_List from) => from.Value;
            
            public static implicit operator Sass_Import_List(IntPtr from) => new Sass_Import_List(from);
            
            public static bool operator ==(Sass_Import_List left, Sass_Import_List right) => left.Equals(right);
            
            public static bool operator !=(Sass_Import_List left, Sass_Import_List right) => !left.Equals(right);
        }
        
        /// <summary>
        /// Typedef helpers for custom importer lists
        /// </summary>
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public readonly partial struct Sass_Importer_Entry : IEquatable<Sass_Importer_Entry>
        {
            public Sass_Importer_Entry(LibSass.Sass_Importer value) => this.Value = value;
            
            public readonly LibSass.Sass_Importer Value;
            
            public bool Equals(Sass_Importer_Entry other) =>  Value.Equals(other.Value);
            
            public override bool Equals(object obj) => obj is Sass_Importer_Entry other && Equals(other);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator LibSass.Sass_Importer(Sass_Importer_Entry from) => from.Value;
            
            public static implicit operator Sass_Importer_Entry(LibSass.Sass_Importer from) => new Sass_Importer_Entry(from);
            
            public static bool operator ==(Sass_Importer_Entry left, Sass_Importer_Entry right) => left.Equals(right);
            
            public static bool operator !=(Sass_Importer_Entry left, Sass_Importer_Entry right) => !left.Equals(right);
        }
        
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public readonly partial struct Sass_Importer_List : IEquatable<Sass_Importer_List>
        {
            public Sass_Importer_List(IntPtr value) => this.Value = value;
            
            public readonly IntPtr Value;
            
            public bool Equals(Sass_Importer_List other) =>  Value.Equals(other.Value);
            
            public override bool Equals(object obj) => obj is Sass_Importer_List other && Equals(other);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator IntPtr(Sass_Importer_List from) => from.Value;
            
            public static implicit operator Sass_Importer_List(IntPtr from) => new Sass_Importer_List(from);
            
            public static bool operator ==(Sass_Importer_List left, Sass_Importer_List right) => left.Equals(right);
            
            public static bool operator !=(Sass_Importer_List left, Sass_Importer_List right) => !left.Equals(right);
        }
        
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate LibSass.Sass_Import_List Sass_Importer_Fn([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(UTF8MarshallerNoFree))] string url, LibSass.Sass_Importer_Entry cb, LibSass.Sass_Compiler compiler);
        
        /// <summary>
        /// Typedef helpers for custom functions lists
        /// </summary>
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public readonly partial struct Sass_Function_Entry : IEquatable<Sass_Function_Entry>
        {
            public Sass_Function_Entry(LibSass.Sass_Function value) => this.Value = value;
            
            public readonly LibSass.Sass_Function Value;
            
            public bool Equals(Sass_Function_Entry other) =>  Value.Equals(other.Value);
            
            public override bool Equals(object obj) => obj is Sass_Function_Entry other && Equals(other);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator LibSass.Sass_Function(Sass_Function_Entry from) => from.Value;
            
            public static implicit operator Sass_Function_Entry(LibSass.Sass_Function from) => new Sass_Function_Entry(from);
            
            public static bool operator ==(Sass_Function_Entry left, Sass_Function_Entry right) => left.Equals(right);
            
            public static bool operator !=(Sass_Function_Entry left, Sass_Function_Entry right) => !left.Equals(right);
        }
        
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public readonly partial struct Sass_Function_List : IEquatable<Sass_Function_List>
        {
            public Sass_Function_List(IntPtr value) => this.Value = value;
            
            public readonly IntPtr Value;
            
            public bool Equals(Sass_Function_List other) =>  Value.Equals(other.Value);
            
            public override bool Equals(object obj) => obj is Sass_Function_List other && Equals(other);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator IntPtr(Sass_Function_List from) => from.Value;
            
            public static implicit operator Sass_Function_List(IntPtr from) => new Sass_Function_List(from);
            
            public static bool operator ==(Sass_Function_List left, Sass_Function_List right) => left.Equals(right);
            
            public static bool operator !=(Sass_Function_List left, Sass_Function_List right) => !left.Equals(right);
        }
        
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate LibSass.Sass_Value Sass_Function_Fn(in LibSass.Sass_Value arg0, LibSass.Sass_Function_Entry cb, LibSass.Sass_Compiler compiler);
        
        /// <summary>
        /// to allocate buffer to be filled
        /// </summary>
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        public static extern IntPtr sass_alloc_memory(LibSass.size_t size);
        
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public readonly partial struct size_t : IEquatable<size_t>
        {
            public size_t(IntPtr value) => this.Value = value;
            
            public readonly IntPtr Value;
            
            public bool Equals(size_t other) =>  Value.Equals(other.Value);
            
            public override bool Equals(object obj) => obj is size_t other && Equals(other);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator IntPtr(size_t from) => from.Value;
            
            public static implicit operator size_t(IntPtr from) => new size_t(from);
            
            public static bool operator ==(size_t left, size_t right) => left.Equals(right);
            
            public static bool operator !=(size_t left, size_t right) => !left.Equals(right);
        }
        
        /// <summary>
        /// to allocate a buffer from existing string
        /// </summary>
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        public static extern IntPtr sass_copy_c_string([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(UTF8MarshallerNoFree))] string str);
        
        /// <summary>
        /// to free overtaken memory when done
        /// </summary>
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        public static extern void sass_free_memory(IntPtr ptr);
        
        /// <summary>
        /// Some convenient string helper function
        /// </summary>
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        public static extern IntPtr sass_string_quote([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(UTF8MarshallerNoFree))] string str, sbyte quote_mark);
        
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        public static extern IntPtr sass_string_unquote([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(UTF8MarshallerNoFree))] string str);
        
        /// <summary>
        /// Implemented sass language version
        /// Hardcoded version 3.4 for time being
        /// </summary>
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        [return:MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(UTF8MarshallerNoFree))]
        public static extern string libsass_version();
        
        /// <summary>
        /// Get compiled libsass language
        /// </summary>
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        [return:MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(UTF8MarshallerNoFree))]
        public static extern string libsass_language_version();
        
        /// <summary>
        /// Creator functions for all value types
        /// </summary>
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        public static extern LibSass.Sass_Value sass_make_null();
        
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        public static extern LibSass.Sass_Value sass_make_boolean([MarshalAs(UnmanagedType.U1)] bool val);
        
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        public static extern LibSass.Sass_Value sass_make_string([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(UTF8MarshallerNoFree))] string val);
        
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        public static extern LibSass.Sass_Value sass_make_qstring([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(UTF8MarshallerNoFree))] string val);
        
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        public static extern LibSass.Sass_Value sass_make_number(double val, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(UTF8MarshallerNoFree))] string unit);
        
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        public static extern LibSass.Sass_Value sass_make_color(double r, double g, double b, double a);
        
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        public static extern LibSass.Sass_Value sass_make_list(LibSass.size_t len, LibSass.Sass_Separator sep, [MarshalAs(UnmanagedType.U1)] bool is_bracketed);
        
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        public static extern LibSass.Sass_Value sass_make_map(LibSass.size_t len);
        
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        public static extern LibSass.Sass_Value sass_make_error([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(UTF8MarshallerNoFree))] string msg);
        
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        public static extern LibSass.Sass_Value sass_make_warning([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(UTF8MarshallerNoFree))] string msg);
        
        /// <summary>
        /// Generic destructor function for all types
        /// Will release memory of all associated Sass_Values
        /// Means we will delete recursively for lists and maps
        /// </summary>
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        public static extern void sass_delete_value(LibSass.Sass_Value val);
        
        /// <summary>
        /// Make a deep cloned copy of the given sass value
        /// </summary>
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        public static extern LibSass.Sass_Value sass_clone_value(in LibSass.Sass_Value val);
        
        /// <summary>
        /// Execute an operation for two Sass_Values and return the result as a Sass_Value too
        /// </summary>
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        public static extern LibSass.Sass_Value sass_value_op(LibSass.Sass_OP op, in LibSass.Sass_Value a, in LibSass.Sass_Value b);
        
        /// <summary>
        /// Stringify a Sass_Values and also return the result as a Sass_Value (of type STRING)
        /// </summary>
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        public static extern LibSass.Sass_Value sass_value_stringify(in LibSass.Sass_Value a, [MarshalAs(UnmanagedType.U1)] bool compressed, int precision);
        
        /// <summary>
        /// Return the sass tag for a generic sass value
        /// Check is needed before accessing specific values!
        /// </summary>
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        public static extern LibSass.Sass_Tag sass_value_get_tag(in LibSass.Sass_Value v);
        
        /// <summary>
        /// Check value to be of a specific type
        /// Can also be used before accessing properties!
        /// </summary>
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        [return:MarshalAs(UnmanagedType.U1)]
        public static extern bool sass_value_is_null(in LibSass.Sass_Value v);
        
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        [return:MarshalAs(UnmanagedType.U1)]
        public static extern bool sass_value_is_number(in LibSass.Sass_Value v);
        
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        [return:MarshalAs(UnmanagedType.U1)]
        public static extern bool sass_value_is_string(in LibSass.Sass_Value v);
        
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        [return:MarshalAs(UnmanagedType.U1)]
        public static extern bool sass_value_is_boolean(in LibSass.Sass_Value v);
        
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        [return:MarshalAs(UnmanagedType.U1)]
        public static extern bool sass_value_is_color(in LibSass.Sass_Value v);
        
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        [return:MarshalAs(UnmanagedType.U1)]
        public static extern bool sass_value_is_list(in LibSass.Sass_Value v);
        
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        [return:MarshalAs(UnmanagedType.U1)]
        public static extern bool sass_value_is_map(in LibSass.Sass_Value v);
        
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        [return:MarshalAs(UnmanagedType.U1)]
        public static extern bool sass_value_is_error(in LibSass.Sass_Value v);
        
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        [return:MarshalAs(UnmanagedType.U1)]
        public static extern bool sass_value_is_warning(in LibSass.Sass_Value v);
        
        /// <summary>
        /// Getters and setters for Sass_Number
        /// </summary>
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        public static extern double sass_number_get_value(in LibSass.Sass_Value v);
        
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        public static extern void sass_number_set_value(LibSass.Sass_Value v, double value);
        
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        [return:MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(UTF8MarshallerNoFree))]
        public static extern string sass_number_get_unit(in LibSass.Sass_Value v);
        
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        public static extern void sass_number_set_unit(LibSass.Sass_Value v, IntPtr unit);
        
        /// <summary>
        /// Getters and setters for Sass_String
        /// </summary>
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        [return:MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(UTF8MarshallerNoFree))]
        public static extern string sass_string_get_value(in LibSass.Sass_Value v);
        
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        public static extern void sass_string_set_value(LibSass.Sass_Value v, IntPtr value);
        
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        [return:MarshalAs(UnmanagedType.U1)]
        public static extern bool sass_string_is_quoted(in LibSass.Sass_Value v);
        
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        public static extern void sass_string_set_quoted(LibSass.Sass_Value v, [MarshalAs(UnmanagedType.U1)] bool quoted);
        
        /// <summary>
        /// Getters and setters for Sass_Boolean
        /// </summary>
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        [return:MarshalAs(UnmanagedType.U1)]
        public static extern bool sass_boolean_get_value(in LibSass.Sass_Value v);
        
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        public static extern void sass_boolean_set_value(LibSass.Sass_Value v, [MarshalAs(UnmanagedType.U1)] bool value);
        
        /// <summary>
        /// Getters and setters for Sass_Color
        /// </summary>
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        public static extern double sass_color_get_r(in LibSass.Sass_Value v);
        
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        public static extern void sass_color_set_r(LibSass.Sass_Value v, double r);
        
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        public static extern double sass_color_get_g(in LibSass.Sass_Value v);
        
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        public static extern void sass_color_set_g(LibSass.Sass_Value v, double g);
        
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        public static extern double sass_color_get_b(in LibSass.Sass_Value v);
        
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        public static extern void sass_color_set_b(LibSass.Sass_Value v, double b);
        
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        public static extern double sass_color_get_a(in LibSass.Sass_Value v);
        
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        public static extern void sass_color_set_a(LibSass.Sass_Value v, double a);
        
        /// <summary>
        /// Getter for the number of items in list
        /// </summary>
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        public static extern LibSass.size_t sass_list_get_length(in LibSass.Sass_Value v);
        
        /// <summary>
        /// Getters and setters for Sass_List
        /// </summary>
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        public static extern LibSass.Sass_Separator sass_list_get_separator(in LibSass.Sass_Value v);
        
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        public static extern void sass_list_set_separator(LibSass.Sass_Value v, LibSass.Sass_Separator value);
        
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        [return:MarshalAs(UnmanagedType.U1)]
        public static extern bool sass_list_get_is_bracketed(in LibSass.Sass_Value v);
        
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        public static extern void sass_list_set_is_bracketed(LibSass.Sass_Value v, [MarshalAs(UnmanagedType.U1)] bool value);
        
        /// <summary>
        /// Getters and setters for Sass_List values
        /// </summary>
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        public static extern LibSass.Sass_Value sass_list_get_value(in LibSass.Sass_Value v, LibSass.size_t i);
        
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        public static extern void sass_list_set_value(LibSass.Sass_Value v, LibSass.size_t i, LibSass.Sass_Value value);
        
        /// <summary>
        /// Getter for the number of items in map
        /// </summary>
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        public static extern LibSass.size_t sass_map_get_length(in LibSass.Sass_Value v);
        
        /// <summary>
        /// Getters and setters for Sass_Map keys and values
        /// </summary>
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        public static extern LibSass.Sass_Value sass_map_get_key(in LibSass.Sass_Value v, LibSass.size_t i);
        
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        public static extern void sass_map_set_key(LibSass.Sass_Value v, LibSass.size_t i, LibSass.Sass_Value arg2);
        
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        public static extern LibSass.Sass_Value sass_map_get_value(in LibSass.Sass_Value v, LibSass.size_t i);
        
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        public static extern void sass_map_set_value(LibSass.Sass_Value v, LibSass.size_t i, LibSass.Sass_Value arg2);
        
        /// <summary>
        /// Getters and setters for Sass_Error
        /// </summary>
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        public static extern IntPtr sass_error_get_message(in LibSass.Sass_Value v);
        
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        public static extern void sass_error_set_message(LibSass.Sass_Value v, IntPtr msg);
        
        /// <summary>
        /// Getters and setters for Sass_Warning
        /// </summary>
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        public static extern IntPtr sass_warning_get_message(in LibSass.Sass_Value v);
        
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        public static extern void sass_warning_set_message(LibSass.Sass_Value v, IntPtr msg);
        
        /// <summary>
        /// Creator for sass custom importer return argument list
        /// </summary>
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        public static extern LibSass.Sass_Importer_List sass_make_importer_list(LibSass.size_t length);
        
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        public static extern LibSass.Sass_Importer_Entry sass_importer_get_list_entry(LibSass.Sass_Importer_List list, LibSass.size_t idx);
        
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        public static extern void sass_importer_set_list_entry(LibSass.Sass_Importer_List list, LibSass.size_t idx, LibSass.Sass_Importer_Entry entry);
        
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        public static extern void sass_delete_importer_list(LibSass.Sass_Importer_List list);
        
        /// <summary>
        /// Creators for custom importer callback (with some additional pointer)
        /// The pointer is mostly used to store the callback into the actual binding
        /// </summary>
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        public static extern LibSass.Sass_Importer_Entry sass_make_importer(LibSass.Sass_Importer_Fn importer, double priority, IntPtr cookie);
        
        /// <summary>
        /// Getters for import function descriptors
        /// </summary>
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        public static extern LibSass.Sass_Importer_Fn sass_importer_get_function(LibSass.Sass_Importer_Entry cb);
        
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        public static extern double sass_importer_get_priority(LibSass.Sass_Importer_Entry cb);
        
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        public static extern IntPtr sass_importer_get_cookie(LibSass.Sass_Importer_Entry cb);
        
        /// <summary>
        /// Deallocator for associated memory
        /// </summary>
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        public static extern void sass_delete_importer(LibSass.Sass_Importer_Entry cb);
        
        /// <summary>
        /// Creator for sass custom importer return argument list
        /// </summary>
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        public static extern LibSass.Sass_Import_List sass_make_import_list(LibSass.size_t length);
        
        /// <summary>
        /// Creator for a single import entry returned by the custom importer inside the list
        /// </summary>
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        public static extern LibSass.Sass_Import_Entry sass_make_import_entry([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(UTF8MarshallerNoFree))] string path, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(UTF8MarshallerNoFree))] string source, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(UTF8MarshallerNoFree))] string srcmap);
        
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        public static extern LibSass.Sass_Import_Entry sass_make_import([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(UTF8MarshallerNoFree))] string imp_path, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(UTF8MarshallerNoFree))] string abs_base, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(UTF8MarshallerNoFree))] string source, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(UTF8MarshallerNoFree))] string srcmap);
        
        /// <summary>
        /// set error message to abort import and to print out a message (path from existing object is used in output)
        /// </summary>
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        public static extern LibSass.Sass_Import_Entry sass_import_set_error(LibSass.Sass_Import_Entry import, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(UTF8MarshallerNoFree))] string message, LibSass.size_t line, LibSass.size_t col);
        
        /// <summary>
        /// Setters to insert an entry into the import list (you may also use [] access directly)
        /// Since we are dealing with pointers they should have a guaranteed and fixed size
        /// </summary>
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        public static extern void sass_import_set_list_entry(LibSass.Sass_Import_List list, LibSass.size_t idx, LibSass.Sass_Import_Entry entry);
        
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        public static extern LibSass.Sass_Import_Entry sass_import_get_list_entry(LibSass.Sass_Import_List list, LibSass.size_t idx);
        
        /// <summary>
        /// Getters for callee entry
        /// </summary>
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        [return:MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(UTF8MarshallerNoFree))]
        public static extern string sass_callee_get_name(LibSass.Sass_Callee_Entry arg0);
        
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        [return:MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(UTF8MarshallerNoFree))]
        public static extern string sass_callee_get_path(LibSass.Sass_Callee_Entry arg0);
        
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        public static extern LibSass.size_t sass_callee_get_line(LibSass.Sass_Callee_Entry arg0);
        
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        public static extern LibSass.size_t sass_callee_get_column(LibSass.Sass_Callee_Entry arg0);
        
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        public static extern LibSass.Sass_Callee_Type sass_callee_get_type(LibSass.Sass_Callee_Entry arg0);
        
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        public static extern LibSass.Sass_Env_Frame sass_callee_get_env(LibSass.Sass_Callee_Entry arg0);
        
        /// <summary>
        /// Getters and Setters for environments (lexical, local and global)
        /// </summary>
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        public static extern LibSass.Sass_Value sass_env_get_lexical(LibSass.Sass_Env_Frame arg0, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(UTF8MarshallerNoFree))] string arg1);
        
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        public static extern void sass_env_set_lexical(LibSass.Sass_Env_Frame arg0, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(UTF8MarshallerNoFree))] string arg1, LibSass.Sass_Value arg2);
        
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        public static extern LibSass.Sass_Value sass_env_get_local(LibSass.Sass_Env_Frame arg0, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(UTF8MarshallerNoFree))] string arg1);
        
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        public static extern void sass_env_set_local(LibSass.Sass_Env_Frame arg0, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(UTF8MarshallerNoFree))] string arg1, LibSass.Sass_Value arg2);
        
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        public static extern LibSass.Sass_Value sass_env_get_global(LibSass.Sass_Env_Frame arg0, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(UTF8MarshallerNoFree))] string arg1);
        
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        public static extern void sass_env_set_global(LibSass.Sass_Env_Frame arg0, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(UTF8MarshallerNoFree))] string arg1, LibSass.Sass_Value arg2);
        
        /// <summary>
        /// Getters for import entry
        /// </summary>
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        [return:MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(UTF8MarshallerNoFree))]
        public static extern string sass_import_get_imp_path(LibSass.Sass_Import_Entry arg0);
        
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        [return:MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(UTF8MarshallerNoFree))]
        public static extern string sass_import_get_abs_path(LibSass.Sass_Import_Entry arg0);
        
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        [return:MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(UTF8MarshallerNoFree))]
        public static extern string sass_import_get_source(LibSass.Sass_Import_Entry arg0);
        
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        [return:MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(UTF8MarshallerNoFree))]
        public static extern string sass_import_get_srcmap(LibSass.Sass_Import_Entry arg0);
        
        /// <summary>
        /// Explicit functions to take ownership of these items
        /// The property on our struct will be reset to NULL
        /// </summary>
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        public static extern IntPtr sass_import_take_source(LibSass.Sass_Import_Entry arg0);
        
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        public static extern IntPtr sass_import_take_srcmap(LibSass.Sass_Import_Entry arg0);
        
        /// <summary>
        /// Getters from import error entry
        /// </summary>
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        public static extern LibSass.size_t sass_import_get_error_line(LibSass.Sass_Import_Entry arg0);
        
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        public static extern LibSass.size_t sass_import_get_error_column(LibSass.Sass_Import_Entry arg0);
        
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        [return:MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(UTF8MarshallerNoFree))]
        public static extern string sass_import_get_error_message(LibSass.Sass_Import_Entry arg0);
        
        /// <summary>
        /// Deallocator for associated memory (incl. entries)
        /// </summary>
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        public static extern void sass_delete_import_list(LibSass.Sass_Import_List arg0);
        
        /// <summary>
        /// Just in case we have some stray import structs
        /// </summary>
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        public static extern void sass_delete_import(LibSass.Sass_Import_Entry arg0);
        
        /// <summary>
        /// Creators for sass function list and function descriptors
        /// </summary>
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        public static extern LibSass.Sass_Function_List sass_make_function_list(LibSass.size_t length);
        
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        public static extern LibSass.Sass_Function_Entry sass_make_function([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(UTF8MarshallerNoFree))] string signature, LibSass.Sass_Function_Fn cb, IntPtr cookie);
        
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        public static extern void sass_delete_function(LibSass.Sass_Function_Entry entry);
        
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        public static extern void sass_delete_function_list(LibSass.Sass_Function_List list);
        
        /// <summary>
        /// Setters and getters for callbacks on function lists
        /// </summary>
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        public static extern LibSass.Sass_Function_Entry sass_function_get_list_entry(LibSass.Sass_Function_List list, LibSass.size_t pos);
        
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        public static extern void sass_function_set_list_entry(LibSass.Sass_Function_List list, LibSass.size_t pos, LibSass.Sass_Function_Entry cb);
        
        /// <summary>
        /// Getters for custom function descriptors
        /// </summary>
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        [return:MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(UTF8MarshallerNoFree))]
        public static extern string sass_function_get_signature(LibSass.Sass_Function_Entry cb);
        
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        public static extern LibSass.Sass_Function_Fn sass_function_get_function(LibSass.Sass_Function_Entry cb);
        
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        public static extern IntPtr sass_function_get_cookie(LibSass.Sass_Function_Entry cb);
        
        /// <summary>
        /// Create and initialize an option struct
        /// </summary>
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        public static extern LibSass.Sass_Options sass_make_options();
        
        /// <summary>
        /// Create and initialize a specific context
        /// </summary>
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        public static extern LibSass.Sass_File_Context sass_make_file_context([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(UTF8MarshallerNoFree))] string input_path);
        
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        public static extern LibSass.Sass_Data_Context sass_make_data_context([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(UTF8MarshallerNoFree))] string source_string);
        
        /// <summary>
        /// Call the compilation step for the specific context
        /// </summary>
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        public static extern int sass_compile_file_context(LibSass.Sass_File_Context ctx);
        
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        public static extern int sass_compile_data_context(LibSass.Sass_Data_Context ctx);
        
        /// <summary>
        /// Create a sass compiler instance for more control
        /// </summary>
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        public static extern LibSass.Sass_Compiler sass_make_file_compiler(LibSass.Sass_File_Context file_ctx);
        
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        public static extern LibSass.Sass_Compiler sass_make_data_compiler(LibSass.Sass_Data_Context data_ctx);
        
        /// <summary>
        /// Execute the different compilation steps individually
        /// Useful if you only want to query the included files
        /// </summary>
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        public static extern int sass_compiler_parse(LibSass.Sass_Compiler compiler);
        
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        public static extern int sass_compiler_execute(LibSass.Sass_Compiler compiler);
        
        /// <summary>
        /// Release all memory allocated with the compiler
        /// This does _not_ include any contexts or options
        /// </summary>
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        public static extern void sass_delete_compiler(LibSass.Sass_Compiler compiler);
        
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        public static extern void sass_delete_options(LibSass.Sass_Options options);
        
        /// <summary>
        /// Release all memory allocated and also ourself
        /// </summary>
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        public static extern void sass_delete_file_context(LibSass.Sass_File_Context ctx);
        
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        public static extern void sass_delete_data_context(LibSass.Sass_Data_Context ctx);
        
        /// <summary>
        /// Getters for context from specific implementation
        /// </summary>
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        public static extern LibSass.Sass_Context sass_file_context_get_context(LibSass.Sass_File_Context file_ctx);
        
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        public static extern LibSass.Sass_Context sass_data_context_get_context(LibSass.Sass_Data_Context data_ctx);
        
        /// <summary>
        /// Getters for Context_Options from Sass_Context
        /// </summary>
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        public static extern LibSass.Sass_Options sass_context_get_options(LibSass.Sass_Context ctx);
        
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        public static extern LibSass.Sass_Options sass_file_context_get_options(LibSass.Sass_File_Context file_ctx);
        
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        public static extern LibSass.Sass_Options sass_data_context_get_options(LibSass.Sass_Data_Context data_ctx);
        
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        public static extern void sass_file_context_set_options(LibSass.Sass_File_Context file_ctx, LibSass.Sass_Options opt);
        
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        public static extern void sass_data_context_set_options(LibSass.Sass_Data_Context data_ctx, LibSass.Sass_Options opt);
        
        /// <summary>
        /// Getters for Context_Option values
        /// </summary>
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        public static extern int sass_option_get_precision(LibSass.Sass_Options options);
        
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        public static extern LibSass.Sass_Output_Style sass_option_get_output_style(LibSass.Sass_Options options);
        
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        [return:MarshalAs(UnmanagedType.U1)]
        public static extern bool sass_option_get_source_comments(LibSass.Sass_Options options);
        
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        [return:MarshalAs(UnmanagedType.U1)]
        public static extern bool sass_option_get_source_map_embed(LibSass.Sass_Options options);
        
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        [return:MarshalAs(UnmanagedType.U1)]
        public static extern bool sass_option_get_source_map_contents(LibSass.Sass_Options options);
        
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        [return:MarshalAs(UnmanagedType.U1)]
        public static extern bool sass_option_get_source_map_file_urls(LibSass.Sass_Options options);
        
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        [return:MarshalAs(UnmanagedType.U1)]
        public static extern bool sass_option_get_omit_source_map_url(LibSass.Sass_Options options);
        
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        [return:MarshalAs(UnmanagedType.U1)]
        public static extern bool sass_option_get_is_indented_syntax_src(LibSass.Sass_Options options);
        
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        [return:MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(UTF8MarshallerNoFree))]
        public static extern string sass_option_get_indent(LibSass.Sass_Options options);
        
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        [return:MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(UTF8MarshallerNoFree))]
        public static extern string sass_option_get_linefeed(LibSass.Sass_Options options);
        
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        [return:MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(UTF8MarshallerNoFree))]
        public static extern string sass_option_get_input_path(LibSass.Sass_Options options);
        
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        [return:MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(UTF8MarshallerNoFree))]
        public static extern string sass_option_get_output_path(LibSass.Sass_Options options);
        
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        [return:MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(UTF8MarshallerNoFree))]
        public static extern string sass_option_get_source_map_file(LibSass.Sass_Options options);
        
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        [return:MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(UTF8MarshallerNoFree))]
        public static extern string sass_option_get_source_map_root(LibSass.Sass_Options options);
        
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        public static extern LibSass.Sass_Importer_List sass_option_get_c_headers(LibSass.Sass_Options options);
        
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        public static extern LibSass.Sass_Importer_List sass_option_get_c_importers(LibSass.Sass_Options options);
        
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        public static extern LibSass.Sass_Function_List sass_option_get_c_functions(LibSass.Sass_Options options);
        
        /// <summary>
        /// Setters for Context_Option values
        /// </summary>
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        public static extern void sass_option_set_precision(LibSass.Sass_Options options, int precision);
        
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        public static extern void sass_option_set_output_style(LibSass.Sass_Options options, LibSass.Sass_Output_Style output_style);
        
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        public static extern void sass_option_set_source_comments(LibSass.Sass_Options options, [MarshalAs(UnmanagedType.U1)] bool source_comments);
        
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        public static extern void sass_option_set_source_map_embed(LibSass.Sass_Options options, [MarshalAs(UnmanagedType.U1)] bool source_map_embed);
        
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        public static extern void sass_option_set_source_map_contents(LibSass.Sass_Options options, [MarshalAs(UnmanagedType.U1)] bool source_map_contents);
        
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        public static extern void sass_option_set_source_map_file_urls(LibSass.Sass_Options options, [MarshalAs(UnmanagedType.U1)] bool source_map_file_urls);
        
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        public static extern void sass_option_set_omit_source_map_url(LibSass.Sass_Options options, [MarshalAs(UnmanagedType.U1)] bool omit_source_map_url);
        
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        public static extern void sass_option_set_is_indented_syntax_src(LibSass.Sass_Options options, [MarshalAs(UnmanagedType.U1)] bool is_indented_syntax_src);
        
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        public static extern void sass_option_set_indent(LibSass.Sass_Options options, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(UTF8MarshallerNoFree))] string indent);
        
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        public static extern void sass_option_set_linefeed(LibSass.Sass_Options options, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(UTF8MarshallerNoFree))] string linefeed);
        
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        public static extern void sass_option_set_input_path(LibSass.Sass_Options options, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(UTF8MarshallerNoFree))] string input_path);
        
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        public static extern void sass_option_set_output_path(LibSass.Sass_Options options, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(UTF8MarshallerNoFree))] string output_path);
        
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        public static extern void sass_option_set_plugin_path(LibSass.Sass_Options options, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(UTF8MarshallerNoFree))] string plugin_path);
        
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        public static extern void sass_option_set_include_path(LibSass.Sass_Options options, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(UTF8MarshallerNoFree))] string include_path);
        
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        public static extern void sass_option_set_source_map_file(LibSass.Sass_Options options, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(UTF8MarshallerNoFree))] string source_map_file);
        
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        public static extern void sass_option_set_source_map_root(LibSass.Sass_Options options, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(UTF8MarshallerNoFree))] string source_map_root);
        
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        public static extern void sass_option_set_c_headers(LibSass.Sass_Options options, LibSass.Sass_Importer_List c_headers);
        
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        public static extern void sass_option_set_c_importers(LibSass.Sass_Options options, LibSass.Sass_Importer_List c_importers);
        
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        public static extern void sass_option_set_c_functions(LibSass.Sass_Options options, LibSass.Sass_Function_List c_functions);
        
        /// <summary>
        /// Getters for Sass_Context values
        /// </summary>
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        [return:MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(UTF8MarshallerNoFree))]
        public static extern string sass_context_get_output_string(LibSass.Sass_Context ctx);
        
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        public static extern int sass_context_get_error_status(LibSass.Sass_Context ctx);
        
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        [return:MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(UTF8MarshallerNoFree))]
        public static extern string sass_context_get_error_json(LibSass.Sass_Context ctx);
        
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        [return:MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(UTF8MarshallerNoFree))]
        public static extern string sass_context_get_error_text(LibSass.Sass_Context ctx);
        
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        [return:MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(UTF8MarshallerNoFree))]
        public static extern string sass_context_get_error_message(LibSass.Sass_Context ctx);
        
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        [return:MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(UTF8MarshallerNoFree))]
        public static extern string sass_context_get_error_file(LibSass.Sass_Context ctx);
        
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        [return:MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(UTF8MarshallerNoFree))]
        public static extern string sass_context_get_error_src(LibSass.Sass_Context ctx);
        
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        public static extern LibSass.size_t sass_context_get_error_line(LibSass.Sass_Context ctx);
        
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        public static extern LibSass.size_t sass_context_get_error_column(LibSass.Sass_Context ctx);
        
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        [return:MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(UTF8MarshallerNoFree))]
        public static extern string sass_context_get_source_map_string(LibSass.Sass_Context ctx);
        
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        public static extern IntPtr sass_context_get_included_files(LibSass.Sass_Context ctx);
        
        /// <summary>
        /// Getters for options include path array
        /// </summary>
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        public static extern LibSass.size_t sass_option_get_include_path_size(LibSass.Sass_Options options);
        
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        [return:MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(UTF8MarshallerNoFree))]
        public static extern string sass_option_get_include_path(LibSass.Sass_Options options, LibSass.size_t i);
        
        /// <summary>
        /// Plugin paths to load dynamic libraries work the same
        /// </summary>
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        public static extern LibSass.size_t sass_option_get_plugin_path_size(LibSass.Sass_Options options);
        
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        [return:MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(UTF8MarshallerNoFree))]
        public static extern string sass_option_get_plugin_path(LibSass.Sass_Options options, LibSass.size_t i);
        
        /// <summary>
        /// Calculate the size of the stored null terminated array
        /// </summary>
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        public static extern LibSass.size_t sass_context_get_included_files_size(LibSass.Sass_Context ctx);
        
        /// <summary>
        /// Take ownership of memory (value on context is set to 0)
        /// </summary>
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        public static extern IntPtr sass_context_take_error_json(LibSass.Sass_Context ctx);
        
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        public static extern IntPtr sass_context_take_error_text(LibSass.Sass_Context ctx);
        
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        public static extern IntPtr sass_context_take_error_message(LibSass.Sass_Context ctx);
        
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        public static extern IntPtr sass_context_take_error_file(LibSass.Sass_Context ctx);
        
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        public static extern IntPtr sass_context_take_error_src(LibSass.Sass_Context ctx);
        
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        public static extern IntPtr sass_context_take_output_string(LibSass.Sass_Context ctx);
        
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        public static extern IntPtr sass_context_take_source_map_string(LibSass.Sass_Context ctx);
        
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        public static extern IntPtr sass_context_take_included_files(LibSass.Sass_Context ctx);
        
        /// <summary>
        /// Getters for Sass_Compiler options
        /// </summary>
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        public static extern LibSass.Sass_Compiler_State sass_compiler_get_state(LibSass.Sass_Compiler compiler);
        
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        public static extern LibSass.Sass_Context sass_compiler_get_context(LibSass.Sass_Compiler compiler);
        
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        public static extern LibSass.Sass_Options sass_compiler_get_options(LibSass.Sass_Compiler compiler);
        
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        public static extern LibSass.size_t sass_compiler_get_import_stack_size(LibSass.Sass_Compiler compiler);
        
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        public static extern LibSass.Sass_Import_Entry sass_compiler_get_last_import(LibSass.Sass_Compiler compiler);
        
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        public static extern LibSass.Sass_Import_Entry sass_compiler_get_import_entry(LibSass.Sass_Compiler compiler, LibSass.size_t idx);
        
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        public static extern LibSass.size_t sass_compiler_get_callee_stack_size(LibSass.Sass_Compiler compiler);
        
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        public static extern LibSass.Sass_Callee_Entry sass_compiler_get_last_callee(LibSass.Sass_Compiler compiler);
        
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        public static extern LibSass.Sass_Callee_Entry sass_compiler_get_callee_entry(LibSass.Sass_Compiler compiler, LibSass.size_t idx);
        
        /// <summary>
        /// Push function for paths (no manipulation support for now)
        /// </summary>
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        public static extern void sass_option_push_plugin_path(LibSass.Sass_Options options, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(UTF8MarshallerNoFree))] string path);
        
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        public static extern void sass_option_push_include_path(LibSass.Sass_Options options, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(UTF8MarshallerNoFree))] string path);
        
        /// <summary>
        /// Resolve a file via the given include paths in the sass option struct
        /// find_file looks for the exact file name while find_include does a regular sass include
        /// </summary>
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        public static extern IntPtr sass_find_file([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(UTF8MarshallerNoFree))] string path, LibSass.Sass_Options opt);
        
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        public static extern IntPtr sass_find_include([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(UTF8MarshallerNoFree))] string path, LibSass.Sass_Options opt);
        
        /// <summary>
        /// Resolve a file relative to last import or include paths in the sass option struct
        /// find_file looks for the exact file name while find_include does a regular sass include
        /// </summary>
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        public static extern IntPtr sass_compiler_find_file([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(UTF8MarshallerNoFree))] string path, LibSass.Sass_Compiler compiler);
        
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        public static extern IntPtr sass_compiler_find_include([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(UTF8MarshallerNoFree))] string path, LibSass.Sass_Compiler compiler);
        
        /// <summary>
        /// available to c and c++ code
        /// </summary>
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        public static extern IntPtr sass2scss([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(UTF8MarshallerNoFree))] string sass, int options);
        
        /// <summary>
        /// Get compiled sass2scss version
        /// </summary>
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        [return:MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(UTF8MarshallerNoFree))]
        public static extern string sass2scss_version();
        
        /// <summary>
        /// converter struct
        /// holding all states
        /// </summary>
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public partial struct converter
        {
            /// <summary>
            /// bit options
            /// </summary>
            public int options;
            
            /// <summary>
            /// is selector
            /// </summary>
            [MarshalAs(UnmanagedType.U1)]
            public bool selector;
            
            /// <summary>
            /// concat lists
            /// </summary>
            [MarshalAs(UnmanagedType.U1)]
            public bool comma;
            
            /// <summary>
            /// has property
            /// </summary>
            [MarshalAs(UnmanagedType.U1)]
            public bool property;
            
            /// <summary>
            /// has semicolon
            /// </summary>
            [MarshalAs(UnmanagedType.U1)]
            public bool semicolon;
            
            /// <summary>
            /// comment context
            /// </summary>
            public LibSass.converter.basic_string comment;
            
            [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
            public partial struct basic_string
            {
            }
            
            /// <summary>
            /// flag end of file
            /// </summary>
            [MarshalAs(UnmanagedType.U1)]
            public bool end_of_file;
            
            /// <summary>
            /// whitespace buffer
            /// </summary>
            public LibSass.converter.basic_string whitespace;
            
            /// <summary>
            /// context/block stack
            /// </summary>
            public LibSass.converter.stack indents;
            
            [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
            public partial struct stack
            {
            }
        }
        
        /// <summary>
        /// pretty print options
        /// </summary>
        public const int SASS2SCSS_PRETTIFY_0 = 0;
        
        public const int SASS2SCSS_PRETTIFY_1 = 1;
        
        public const int SASS2SCSS_PRETTIFY_2 = 2;
        
        public const int SASS2SCSS_PRETTIFY_3 = 3;
        
        /// <summary>
        /// remove one-line comment
        /// </summary>
        public const int SASS2SCSS_KEEP_COMMENT = 32;
        
        /// <summary>
        /// remove multi-line comments
        /// </summary>
        public const int SASS2SCSS_STRIP_COMMENT = 64;
        
        /// <summary>
        /// convert one-line to multi-line
        /// </summary>
        public const int SASS2SCSS_CONVERT_COMMENT = 128;
        
        /// <summary>
        /// function only available in c++ code
        /// </summary>
        [DllImport(LibSassDll, CallingConvention = CallingConvention.Cdecl)]
        public static extern IntPtr sass2scss(ref LibSass.converter.basic_string sass, int options);
    }
}
